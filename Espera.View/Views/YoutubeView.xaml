<UserControl x:Class="Espera.View.Views.YoutubeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:designTime="clr-namespace:Espera.View.DesignTime"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             d:DataContext="{d:DesignInstance designTime:DesignTimeYoutubeViewModel,
                                              IsDesignTimeCreatable=True}"
             d:DesignHeight="300"
             d:DesignWidth="300"
             mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Icons.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <ListView x:Name="YoutubeSongs"
                  IsSynchronizedWithCurrentItem="True"
                  ItemsSource="{Binding Path=SelectableSongs}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding Path=SelectionChangedCommand}" CommandParameter="{Binding ElementName=YoutubeSongs, Path=SelectedItems}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <ListView.Style>
                <Style BasedOn="{StaticResource {x:Type ListView}}" TargetType="{x:Type ListView}">
                    <Setter Property="SelectionMode" Value="Extended" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsAdmin}" Value="False">
                            <Setter Property="SelectionMode" Value="Single" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsSearching}" Value="True">
                            <Setter Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=SearchFailed}" Value="True">
                            <Setter Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListView.Style>
            <ListView.ContextMenu>
                <ContextMenu IsOpen="{Binding Path=SelectedSong.IsContextMenuOpen}">
                    <MenuItem Command="{Binding Path=PlayNowCommand}" Header="Play Now" />
                    <MenuItem Command="{Binding Path=AddToPlaylistCommand}" Header="Add to playlist" />
                    <Separator />
                    <MenuItem ItemsSource="{Binding Path=SelectedSong.VideosToDownload}">
                        <MenuItem.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Path=VideoType, StringFormat=Type: \{0\}}" />
                                    <TextBlock Margin="10, 0, 0, 0" Text="{Binding Path=Resolution, StringFormat=Resolution: \{0\}p}" />
                                </StackPanel>
                            </DataTemplate>
                        </MenuItem.ItemTemplate>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}, Path=DataContext.SelectedSong.DownloadVideoCommand}" />
                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                        <MenuItem.Style>
                            <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="MenuItem">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=SelectedSong.IsLoadingContextMenu}" Value="True">
                                        <Setter Property="Header" Value="Loading video infos..." />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=SelectedSong.IsLoadingContextMenu}" Value="False">
                                        <Setter Property="Header" Value="Download video" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>
                    <MenuItem ItemsSource="{Binding Path=SelectedSong.AudioToDownload}">
                        <MenuItem.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Path=AudioType, StringFormat=Type: \{0\}}" />
                                    <TextBlock Margin="10, 0, 0, 0" Text="{Binding Path=AudioBitrate, StringFormat=Bitrate: \{0\} kbit/s}" />
                                </StackPanel>
                            </DataTemplate>
                        </MenuItem.ItemTemplate>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}, Path=DataContext.SelectedSong.DownloadAudioCommand}" />
                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                        <MenuItem.Style>
                            <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="MenuItem">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=SelectedSong.IsLoadingContextMenu}" Value="True">
                                        <Setter Property="Header" Value="Loading audio infos..." />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=SelectedSong.IsLoadingContextMenu}" Value="False">
                                        <Setter Property="Header" Value="Download audio" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>
                </ContextMenu>
            </ListView.ContextMenu>
            <ListView.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type ListViewItem}}" TargetType="{x:Type ListViewItem}">
                    <EventSetter Event="MouseDoubleClick" Handler="SongDoubleClick" />
                    <EventSetter Event="KeyUp" Handler="SongKeyPressed" />
                </Style>
            </ListView.ItemContainerStyle>
            <ListView.View>
                <GridView>
                    <GridViewColumn Width="{Binding Path=TitleColumnWidth, Mode=TwoWay}">
                        <GridViewColumnHeader Command="{Binding Path=OrderByTitleCommand}" Content="Title" />
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Margin="0, 0, 10, 0"
                                               FontWeight="Bold"
                                               Text="{Binding Path=DownloadProgress,
                                                              StringFormat=Downloading: \{0\}%}"
                                               Visibility="{Binding Path=IsDownloading,
                                                                    Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    <TextBlock Margin="0, 0, 10, 0"
                                               FontWeight="Bold"
                                               Text="Download failed"
                                               Visibility="{Binding Path=DownloadFailed,
                                                                    Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    <TextBlock Text="{Binding Path=Title}" TextTrimming="CharacterEllipsis" />
                                </StackPanel>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                    <GridViewColumn Width="{Binding Path=DurationColumnWidth, Mode=TwoWay}">
                        <GridViewColumnHeader Command="{Binding Path=OrderByDurationCommand}" Content="Duration" />
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Path=FormattedDuration}" TextTrimming="CharacterEllipsis" />
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                    <GridViewColumn Width="{Binding Path=ViewsColumnWidth, Mode=TwoWay}">
                        <GridViewColumnHeader Command="{Binding Path=OrderByViewsCommand}" Content="Views" />
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Path=Views, TargetNullValue=n/a}" TextTrimming="CharacterEllipsis" />
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                    <GridViewColumn Width="{Binding Path=LinkColumnWidth, Mode=TwoWay}" Header="Link">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock>
                                    <Hyperlink PreviewMouseLeftButtonDown="ExternalPathLeftMouseButtonDown" PreviewMouseLeftButtonUp="ExternalPathLeftMouseButtonUp">
                                        <TextBlock Foreground="{DynamicResource BlackColorBrush}"
                                                   Text="{Binding Path=Path}"
                                                   TextDecorations="Underline"
                                                   TextTrimming="CharacterEllipsis" />
                                    </Hyperlink>
                                </TextBlock>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                </GridView>
            </ListView.View>
        </ListView>
        <Grid Visibility="{Binding Path=IsSearching, Converter={StaticResource BooleanToVisibilityConverter}}">
            <controls:ProgressRing IsActive="True" />
        </Grid>
        <StackPanel HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Orientation="Vertical"
                    Visibility="{Binding Path=SearchFailed,
                                         Converter={StaticResource BooleanToVisibilityConverter}}">
            <TextBlock Text="Search failed" />
            <Button Width="50"
                    Height="50"
                    Margin="0, 10, 0, 0"
                    Command="{Binding Path=Search}"
                    Style="{DynamicResource MetroCircleButtonStyle}">
                <Rectangle Width="20" Height="20">
                    <Rectangle.Fill>
                        <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_refresh}" />
                    </Rectangle.Fill>
                </Rectangle>
            </Button>
        </StackPanel>
    </Grid>
</UserControl>